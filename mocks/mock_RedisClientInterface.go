// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	redis "github.com/go-redis/redis"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRedisClientInterface is an autogenerated mock type for the RedisClientInterface type
type MockRedisClientInterface struct {
	mock.Mock
}

type MockRedisClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRedisClientInterface) EXPECT() *MockRedisClientInterface_Expecter {
	return &MockRedisClientInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0
func (_m *MockRedisClientInterface) Get(_a0 string) *redis.StringCmd {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(string) *redis.StringCmd); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// MockRedisClientInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRedisClientInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 string
func (_e *MockRedisClientInterface_Expecter) Get(_a0 interface{}) *MockRedisClientInterface_Get_Call {
	return &MockRedisClientInterface_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *MockRedisClientInterface_Get_Call) Run(run func(_a0 string)) *MockRedisClientInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRedisClientInterface_Get_Call) Return(_a0 *redis.StringCmd) *MockRedisClientInterface_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClientInterface_Get_Call) RunAndReturn(run func(string) *redis.StringCmd) *MockRedisClientInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with no fields
func (_m *MockRedisClientInterface) Ping() *redis.StatusCmd {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func() *redis.StatusCmd); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// MockRedisClientInterface_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockRedisClientInterface_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockRedisClientInterface_Expecter) Ping() *MockRedisClientInterface_Ping_Call {
	return &MockRedisClientInterface_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockRedisClientInterface_Ping_Call) Run(run func()) *MockRedisClientInterface_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRedisClientInterface_Ping_Call) Return(_a0 *redis.StatusCmd) *MockRedisClientInterface_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClientInterface_Ping_Call) RunAndReturn(run func() *redis.StatusCmd) *MockRedisClientInterface_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockRedisClientInterface) Set(_a0 string, _a1 interface{}, _a2 time.Duration) *redis.StatusCmd {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) *redis.StatusCmd); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// MockRedisClientInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockRedisClientInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - _a0 string
//   - _a1 interface{}
//   - _a2 time.Duration
func (_e *MockRedisClientInterface_Expecter) Set(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockRedisClientInterface_Set_Call {
	return &MockRedisClientInterface_Set_Call{Call: _e.mock.On("Set", _a0, _a1, _a2)}
}

func (_c *MockRedisClientInterface_Set_Call) Run(run func(_a0 string, _a1 interface{}, _a2 time.Duration)) *MockRedisClientInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockRedisClientInterface_Set_Call) Return(_a0 *redis.StatusCmd) *MockRedisClientInterface_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClientInterface_Set_Call) RunAndReturn(run func(string, interface{}, time.Duration) *redis.StatusCmd) *MockRedisClientInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRedisClientInterface creates a new instance of MockRedisClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRedisClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRedisClientInterface {
	mock := &MockRedisClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
